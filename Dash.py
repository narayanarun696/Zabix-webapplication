


import sys
import pandas as pd
import numpy as np

#----------------------------------------> IMPORTING MODULES{ONLY DASH} <---------------------------------------------------------------------------------------------------------------------------------------------
from dash import dash,dcc, html,dash_table,Input, Output,ctx,State
import dash_bootstrap_components as dbc
#----------------------------------------> IMPORTING MODULES{ONLY PLOTLY} <---------------------------------------------------------------------------------------------------------------------------------------------
import plotly.graph_objects as go
import plotly.express as px

app = dash.Dash(external_stylesheets=[dbc.themes.BOOTSTRAP])

df=pd.read_csv('D:\Introtallent\Python\DataRecords\excel data sets\zabix.csv')
df['Date']=pd.to_datetime(df['Date'], format='%d-%M-%Y')
df['Load']=df['Load'].fillna(0)
df['Cpu_utilised %']=df['Cpu_utilised %'].fillna(0)

def dategraph(graphdate,df):
    return  html.Div([
    dcc.DatePickerRange(
        id=graphdate,
        start_date=df['Date'].min(),
        end_date=df['Date'].max(),
        show_outside_days=True,
        day_size=32,
        display_format='DD/MM/YYYY',
    )])




def drawTable(table, df):
    return html.Div([
        dash_table.DataTable(
            id = table,
            editable=False,
            sort_action="native",
            sort_mode="multi",
            filter_action='native',
            page_action='native',
            page_current= 0,
            page_size=25,   
            data=df.to_dict('records'),
            columns=[{'id': c, 'name': c} for c in df.columns],
            style_header={
                'color': 'black',
                'border': '2px solid black',
                'backgroundColor': 'rgb(220, 220, 220)',   
                'padding':'10px',
            },
            style_data={
                'backgroundColor': 'rgb(50, 50, 50)',
                'color': 'white',
                'border': '2px solid black',
                'whiteSpace': 'normal',
                'height': 'auto',
            },   
            style_table={
                'overflow':'scroll',
                'height':550},
            
            style_cell={
                'textAlign':'center',
                'minWidth': 100, 
                'maxWidth': 100, 
                'width': 100,
                'font_size': '20px',
                'whiteSpace':'normal',
                'height':'auto'},
        )
    ])



############--------->Date Picker, Graph {Drop down} <----------------------###########################################################################################################################################################################################################################################################################################################################################################################################################################################################

features=df.columns


def dategraphview(graphview,df):
    return  html.Div([
    dcc.DatePickerRange(
        id=graphview,
        start_date=df['Date'].min(),
        end_date=df['Date'].max(),
        show_outside_days=True,
        day_size=32,
        display_format='DD/MM/YYYY',
    )
    ],style={'width':'40%','display':'inline-block'})




def dropdown(xaxis,yaxis,featuregraph):
    return  html.Div([
            dcc.Dropdown(id=xaxis,
                        options=[{'label':i,'value':i} for  i in features], 
                        value='Host',style={'width':'50%','display':'inline-block'},),

            dcc.Dropdown(id=yaxis,
                    options=[{'label':i,'value':i} for  i in features], 
                    value='Load',style={'width':'50%','display':'inline-block'}),

            dcc.Graph(id=featuregraph, style= {
                                        "color": "black",
                                        "display":"inline-block",
                                        "width":"100%",
                                        'paffing':10,
                                        "border-style": "solid"
                                                      })
            

    ],style={'width':'90%','display':'inline-block'})

 
  





app.layout = html.Div([


################################ app ######################################################################################################################################################################################################################################################################################################################################################################################################################################################################################################
    html.Div(
    html.H1('WEB APPLICATION, ZABIX'),
    style={"text-align": "center"},
    ),


    html.Div(
            dategraph("graphdate",df),
            style={"text-align": "center"}),
    html.Br(),
    html.Hr(),
    html.Div(
        drawTable("table",df),
        style={"text-align": "center"}),




    html.Hr(),
    
    html.Div([html.H5('Graphical view')],style={"text-align": "center"}),

    html.Hr(),

    html.Div(
            dategraphview("graphview",df),
            style={"text-align": "center"}),
            html.Br(),
    html.Div(
            dropdown("xaxis","yaxis","featuregraph"),
            style={"text-align": "center"}),
            html.Br(),




    html.Div([
        dcc.Store(id="store"),
        html.Hr(),
        html.Div(
            html.H5("Comparison Graphs"),
            id="button",
            style={'color':'black',
                    'textAlign':'center'}),
        html.Hr(),
        html.Br(),
        dbc.Tabs(
            [               
                dbc.Tab(label="High-CPU Utlization and Load", tab_id="bar"),
                dbc.Tab(label="Percentage of Host Status", tab_id="pie"),
                dbc.Tab(label="Detailed Hosts Status", tab_id="line"),
                        
            ],
            id="tabs",
        ),
        html.Div(id="tab-content", className="p-4"),
        ])


    
])







@app.callback(
    Output('table', 'data'),
    [Input('graphdate', 'start_date'),
     Input('graphdate', 'end_date')])



def update_table(start_date, end_date):
    df2 = df.loc[df["Date"].between(pd.to_datetime(start_date), pd.to_datetime(end_date))]
    data = df2.to_dict("records")
    return data



@app.callback(
Output('table', 'columns'),
[Input('graphdate', 'start_date'),
 Input('graphdate', 'end_date')])



def update_columns(start_date, end_date):
    df2 = df.loc[df["Date"].between(pd.to_datetime(start_date), pd.to_datetime(end_date))]
    columns =[{"name": i, "id": i} for i in df2.columns]
    return columns






@app.callback(
    Output('featuregraph','figure'),
    [Input('graphview', 'start_date'),
    Input('graphview', 'end_date'),
    Input('xaxis','value'),
    Input('yaxis','value')]
)



def update_graph(start_date,end_date,xaxis_name,yaxis_name):    
    df2 = df.loc[df["Date"].between(pd.to_datetime(start_date), pd.to_datetime(end_date))]
    df2['Load'] = df2['Load'].astype(float)
    df2=df2.sort_values(by='Load',ascending=False, ignore_index=True)
    df2['Cpu_utilised %']=df2['Cpu_utilised %'].astype(float)
    return {'data':[go.Scatter(x=df2[xaxis_name].head(25),
                            y=df2[yaxis_name].head(25),
                            text=df2['Host'].head(25),
                            mode='lines+markers',
                            marker={'size':20,
                                    'opacity':0.5,
                                    'line':{'width':0.5},
                                    'symbol':"pentagon",
                                    'color':'black',
                                    'line_color':'black',
                                    'line_width':7,
                                    },
                            
                        )
                ],
        'layout':go.Layout(title='Select required fields from the above Dropdown ',
                            xaxis={'title':xaxis_name},
                            yaxis={'title':yaxis_name},
                            hovermode='closest',
                            paper_bgcolor='rgb(233,233,233)',
                            plot_bgcolor='rgb(169,169,169)',
                            
                            )               
        }




@app.callback(
    Output("tab-content", "children"),
    [Input("tabs", "active_tab"), 
    Input("store", "data")],
)



def render_tab_content(active_tab, data):
    if active_tab == "bar":
        return dcc.Graph(figure=data["bar"])
    if active_tab == "pie":
        return dcc.Graph(figure=data["pie"]),
    if active_tab == "line":
        return dcc.Graph(figure=data["line"]),

    return "No tab selected"



@app.callback(
    Output("store", "data"), 
    [Input("button", "n_clicks")])


def generate_graphs(n):
    ################################ BAR ########################################################################
    
    df3=df.sort_values(by='Cpu_utilised %',ascending=False, ignore_index=True)
    
    df3["Cpu_utilised_percent"]=(df3['Cpu_utilised %'] / df['Cpu_utilised %'].sum()) * 100
    df3["Load_percent"]=(df3['Load'] / df['Load'].sum()) * 100

    trace0=go.Bar(x=df3["Host"],
            y=df3['Cpu_utilised %'],
            name='Cpu_utilised',
            marker={'color':'blue'})
    
    trace1=go.Bar(x=df3["Host"],
            y=df3['Load'],
            name='Load',
            marker={'color':'green'})

    layout1=go.Layout(title="Utilizataion and Load ", barmode="group",
                    xaxis={'title':'Hosts'},
                    yaxis={'title':'Utilization,Load %'},
                    hovermode='closest',
                    paper_bgcolor='rgb(233,233,233)',
                    plot_bgcolor='rgb(169,169,169)',
                    )

    data_bar=[trace0,trace1]
 
    bar=go.Figure(data=data_bar,layout=layout1)


    ################################## Pie ######################################################################
    colors = ['gold', 'mediumturquoise', 'darkorange', 'lightgreen']
    trace3 = go.Pie(labels=df['Maintenance'],hole=.3,insidetextorientation='radial')

    data_pie=[trace3]

    layout_pie=go.Layout(title=" Host status ",
                    paper_bgcolor='rgb(233,233,233)',
                    plot_bgcolor='rgb(169,169,169)')

    piechat=go.Figure(data=data_pie,layout=layout_pie)

    piechat.update_traces(hoverinfo='label+percent', textinfo='value', textfont_size=20,
                  marker=dict(colors=colors, line=dict(color='#000000', width=2)))
    

    ################################## line ######################################################################
    #df4=(df[df['Maintenance'].str.contains('Issue')])

    trace2=go.Scatter(x=df['Host'],
                y=df['Maintenance'],
                mode='lines+markers',
                name='markers')


    data_line=[trace2]


    layout_line=go.Layout(title=" Drill Down Host's status ",
                    xaxis={'title':'Hosts'},
                    yaxis={'title':'Maintenance'},
                    paper_bgcolor='rgb(233,233,233)',
                    plot_bgcolor='rgb(169,169,169)')



    linegraph = go.Figure(data=data_line,layout=layout_line)

    



    return {"bar": bar, "line": linegraph, "pie":piechat}



####################################################################################################################################################################################################################################################################################################################################################################################################################################################################################################################

############################################ Main server to run the function  #################################################################################################################################################################################################################################################################################

if __name__ == "__main__":
    app.run_server(port=8080, debug = True)